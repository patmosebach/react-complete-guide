Section 9: Sending Ajax reqeusts and getting data from server and APIs


DOUBLE CHECK AJAX SECTION
	npm install axios --save
	
	then
	import axios from 'axios';

162. Creating a HTTP request to GET Data 

	Dummy axios call
	
		componentDidMount(){
			axios.get('https://jsonplaceholder.typicode.com/posts')
				.then(response => {
					console.log(response);
				});
		}
		
163. 

    componentDidMount(){
        axios.get('https://jsonplaceholder.typicode.com/posts')
            .then(response => {
                this.setState({posts: response.data})
            });
    }

    render () {
        const posts = this.state.posts.map(post => {
            return <Post key={post.id} title={post.title} />
        });
		
		return(
			//JSX here
		);
	}
	
164. Transforming Data

	You can slide the response.data object and return a subset or even change the object or add other parameters.
	
	Note: slide(0,4) and author:'Max' as the transformations

			.then(response => {
                const posts = response.data.slice(0, 4);
                const updatedPosts = posts.map(post => {
                    return {
                        ...post,
                        author: 'Max'
                    }
                })
                this.setState({posts: updatedPosts})
            });
			
			
166. Fetching Data on Update without Creating infinite loops

	You can make a post to load data about a specific element ID on select.
	
	Note: both if statements that compare previous state id and loadedPost to restrict the infinite loop

		if(this.props.id){
            if(!this.state.loadedPost || this.state.loadedPost && this.state.loadedPost.id !== this.props.id){
                axios.get('https://jsonplaceholder.typicode.com/posts/' + this.props.id)
                .then(response =>{
                    this.setState({loadedPost: response.data});
                });
            }
        }
		
		
167. POSTing data


	//ex.
	postDataHandler = () => {
        const data = {
            title: this.state.title,
            body: this.state.content,
            author: this.state.author
        }
        axios.post('https://jsonplaceholder.typicode.com/posts', data)
        .then(response => {
            console.log(response);
        });
    }
	
	
168.  DELETE

	//ex.
	deletePostHandler = () => {
        axios.delete('https://jsonplaceholder.typicode.com/posts/' + this.props.id)
        .then(response => {
            console.log(response);
        })
    }

170. Handling Errors locally

	You can have a .catch portion of a promise which can update the state and dom to show something went wrong
	
	Note: .catch block and error variable on the state that would dynamically show new text in the render() block.
	
		state = {
			posts: [],
			selectedPostId: null,
			error: false
		}

		componentDidMount(){
			axios.get('https://jsonplaceholder.typicode.com/posts')
				.then(response => {
					const posts = response.data.slice(0, 4);
					const updatedPosts = posts.map(post => {
						return {
							...post,
							author: 'Max'
						}
					})
					this.setState({posts: updatedPosts})
				})
				.catch(error => {
					this.setState({error: true})
				});
		}
		
171. Interceptors 
	
	example uses of interceptors
		validation
		logging resposnes
		handle errors
		edit request 
		add headers
		
	ex. REQUEST and RESPONSE interceptors in index.jsonplaceholder
	
	
		axios.interceptors.request.use(request => {
			console.log(request);

			// Edit request config
			// must return request or request gets blocked
			return request;
		}, error => {
			console.log(error);
			
			// must return promise.reject so that local .catch blocks can do their thing
			return Promise.reject(error);
		});

		axios.interceptors.response.use(response => {
			console.log(response);

			// Edit request config
			// must return response 
			return response;
		}, error => {
			console.log(error);
			
			//must return promise.reject
			return Promise.reject(error);
		});
		
172. Removing Interceptors

	var myInterceptor = axios.interceptors.request.use(function () {/*...*/});
	axios.interceptors.request.eject(myInterceptor);
	
	You can use a conditional to choose when you eject your interceptors
	
	Reasons might be things like logging out.
	
	
173. Settings a default global configuration for Axios

	You can set default configs in the index.js to standardize your requets and make your code cleaner :)

	//src/index.js
	axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';
	axios.defaults.header.common['Authorization'] = 'AUTH TOKEN';
	axios.defaults.header.post['Content-Type'] = 'application/json';
	
174. Creating and Using Axios Instances

	In case you need different settings for different endpoints and APIs you can use axios instances
	
		//src/axios.js
		import axios from 'axios';

		const instance = axios.create({
			baseURL: 'https://jsonplaceholder.typicode.com'
		});

		instance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';

		//instance.interceptors.request...

		//instance.interceptors.reqposne...

		export default instance;
		
	To use the interceptor just import it instead of axios itself
	
		//src/containers/blog.js
			//Instead of axios
			//import axios from 'axios';
			
			//Use the instance we created
			import axios from '../../axios';
	
		
		
		
	
	