Section 11 Multi-Page-Feeling in a Single-Page-App: Routing

http--01-starting-setup application

189. Setting up Links

	quick unordered list structure for the links at the top of the page/container

	<header>
		<nav>
			<ul>
				<li><a href="/">Home</a></li>
				<li><a href="/new-post">New Post</a></li>

			</ul>
		</nav>
	</header>
	
190. Setting up the router package

	$ npm install --save react-router react-router-dom
	
	note: `react-router` has the logic for the routing but `react-router-dom` has the ability to tell the page to reload both are needed :)
	
	Import BrowserRouter from 'react-router-dom' and wrap the entire app in it
	
	//ex. App.js
		class App extends Component {
		  render() {
			return (
			  <BrowserRouter>
				<div className="App">
				  <Blog />
				</div>
			  </BrowserRouter>

			);
		  }
		}
	
	
191. React-router vs react-router-dom

	Note: We installed both react-router  and react-router-dom . Technically, only react-router-dom  is required for web development. It wraps react-router  and therefore uses it as a dependency. 

	We don't need to install react-router  on our own for it to work. You can omit this installation step, I left it in there for historic reasons and because I like to emphasize that the main package is named react-router. If you ever search for assistance, you probably want to search for "react router" - that's the name of the package.
	
	
192. Preparing the Project for routing

	This was mainly restructuring and breaking the blog container into different containers for each page :)

	