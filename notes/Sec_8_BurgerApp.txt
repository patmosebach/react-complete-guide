Section 8: A Real App: The Burger Builder App

85. A Better Project Structure

119. Planning an App in React - Core Steps

	1) Comopnent Tree / Component Structure		
		
	2) Application State (Data)
	
	3) Components vs Containers
	
120. Planning our App - Layout and Component Tree

	- Draw out your application roughly
	
	App
	
		Layout
		
			Toolbar			
				DrawerToggle
				Logo
				NavigationItems
				
			SideDrawer			
				Logo
				NavigationItems
				
			Backdrop
			
			{props.children}			
				Different Pages
				Burger Builder				
					Build Controls
						BuildControl
						BuildControl...						
						Order Button						
					Burger
						Ingredient
						Ingredient...
						
					Modal
						{props.children}
						
121. Planning the State

	State{
		Ingredients: {meat: 1, cheese: 2... }
		Purchased: true
		TotalPrice: 12.54
	}
	
	- Should put State in just the Burger Builder component
	
123. Setting up the Project
	
	sudo npm install create-react-app -g

	create-react-app react-complete-guide
	create-react-app react-complete-guide --scripts-version 1.1.5 (creates same structure 
	
	run: "npm run eject"
	
	Enable css modules by adding the following lines to the options for "css-loader" in both dev and prod webpack.config.dev.js and webpack.config.prod.js
	
		modules: true,
		localIdentName: '[name]__[local]__[hash:base64:5]'
		
	Cleanup
		remove logo.svg
		remove import for logo.svg
		remove classname and div contents
		remove app.css import and file
		
		search google fonts and pick a font that you like 
		add the font's you would like to import and paste the embed link into the index.html above the title
		
124. Creating a Layout Component

	- Containers
		Stateful components
			Class based 
			Functional w/ useState
			
	- Components
		Presentational components
			Don't use state
			Dumb components
			
	- <Layout> will be used to house the persistnet UX elements (backdrop, toolbar, sidedrawer) and house the pages that we navigate to using the toolbar.
	
125. Starting Implementation of the Burger Builder Containers
	- Created the BurgerBuilder component 
		
		Used Aux hoc
		Added margin-top to Layout so that the burgerbuilder was spaced a little better.
		
126. Adding a Dynamic Ingredient Component

	You can make a dynamic component by using a switchstatement to return different classes of css and JSX code depending on the string or enum you pass in.
	
		const burgerIngredient = (props) => {
			let ingredient = null;

			switch(props.type){
				case('bread-bottom'):
					ingredient = <div className={classes.BreadBottom}></div>;
					break;
				case('bread-top'):
					ingredient = (
						<div className={classes.BreadTop}>
							<div>className={classes.Seeds1}</div>
							<div>className={classes.Seeds2}</div>
						</div>
					);
					break;
				case('meat'):
					ingredient = <div className={classes.Meat}></div>
					break;
				case('cheese'):
					ingredient = <div className={classes.Cheese}></div>
					break;
				case('salad'): 
					ingredient = <div className={classes.Salad}></div>
					break;
				case('bacon'):
					ingredient = <div className={classes.Bacon}></div>
					break;
				default:
					ingredient = null;
			}

			return ingredient;
		};
		
127. Adding Prop Type Validation

	You can add the .isRequired to any propType and it will be required
	
		BurgerIngredient.propTypes = {
			type: PropTypes.string.isRequired
		};
		
	Also converted functional component to class based component
	
128. Starting Burger Component

	Import our ingredients and add some css to the wrapping div of the ingredients.
	
		const burger = (props) => {
			return (
				<div className={classes.Burger}>
					<BurgerIngredient type="bread-top"/>
					<BurgerIngredient type="cheese"/>
					<BurgerIngredient type="meat"/>
					<BurgerIngredient type="bread-bottom"/>
				</div>
			);
		};
		
	We can also use @media queries to help us change the viewport
	
		@media (min-width: 1000px) and (min-height: 700px){
			.Burger {
				width: 700px;
				height: 600px;
			}
		}

		@media (min-width: 500px) and (min-height: 401px){
			.Burger {
				width: 450px;
				height: 400px;
			}
		}
	
	
129. Outputting Burger Ingredients Dynamically

	Adding ingredients to the state of burgerbuilder
	
		state = {
			ingredients:{
				salad: 1,
				bacon: 1,
				cheese: 2,
				meat: 2
			}
		}
		
	Transform the key value object into an array of JSX elements
	
		const transformedIngredients = Object.keys(props.ingredients)
		.map(igKey => {
			return [...Array(props.ingredients[igKey])].map((_, i) => {
				return <BurgerIngredient key={igKey + i} type={igKey} />
			});
		});
		
	Use the array in the return 
		
		return (

			<div className={classes.Burger}>
				<BurgerIngredient type="bread-top"/>
				{transformedIngredients}
				<BurgerIngredient type="bread-bottom"/>
			</div>
		);
		
130. Calculating the Ingredient Sum Dynamically

	You can flatten arrays by using the reduce javascript functional - Notice the .reduce appended to the transformedIngredients
	
		const transformedIngredients = Object.keys(props.ingredients)
		.map(igKey => {
			return [...Array(props.ingredients[igKey])].map((_, i) => {
				return <BurgerIngredient key={igKey + i} type={igKey} />
			});
		})
		.reduce((arr, el) => {
			return arr.concat(el);
		}, []);
		
		
	Object.keys returns an array of the keys of an object ex. ['salad', 'bacon', 'cheese', 'meat']
	
	[Array].map runs a function on each element of an array
	
	array.reduce runs a function on each element of an array and accumulates an object that it returns. arr is the accumulation and can be initialized after the function parameter. el is the dynamic parameter that is changed each iteration
	
	
	By recuding the array you can check if the array is empty so that we don't return empty buns
	
		if(transformedIngredients.length === 0){
			transformedIngredients = <p>Please start adding ingredients</p>
		}
		
131. Adding the Build Control Component
	
132. Outputting Multiple Build Controls

133. Connecting State to Build Controls
	Adding ingredients dynamically. 
	
	You can use the spread operator to create new javascript objects similar to arrays using this syntax
	

		addIngredientHandler = (ingredient) => {
			
			const oldCount = this.state.ingredients[ingredient];
			const updatedCount = oldCount + 1;
			const updatedIngredients = {
				...this.state.ingredients
			};

			updatedIngredients[ingredient] = updatedCount;
			const priceAddition = INGREDIENT_PRICES[ingredient];
			const oldPrice = this.state.totalPrice;
			const newPrice = oldPrice + priceAddition;

			this.setState({
				ingredients: updatedIngredients,
				totalPrice: newPrice
			})
		}
		
134. Removing Ingredients Safely

	Be sure to remove items immutably as well
	
	Instead of doing checks for removal you can create a disabledInfo object to disable child buttons to safely control the flow of the app and state
	
135. Updating the Burger Price

136. Adding the Order Button
	Add the order button underneath the ingredient controls.
	
	CSS provided by teacher.
	
	We can check if the burger should be purchasable with a new state variable the function called after add and remove.
	
		state = {
			ingredients:{
				salad: 0,
				bacon: 0,
				cheese: 0,
				meat: 0
			},
			totalPrice: 4,
			purchasable: false
		}
	
		updatePurchaseState(){
			const ingredients = {
				...this.state.ingredients
			};

			const sum = Object.keys(ingredients)
				.map(igKey => {
					return ingredients[igKey];
				})
				.reduce((sum, el) => {
					return sum + el;
				}, 0);

			this.setState({purchasable: sum > 0})
		}
		
		pass prop puchasable to BuildControls component
		
	When you call a function that relies on the state right after this.setState(); you need to pass the updated state object that will be used.
		
		